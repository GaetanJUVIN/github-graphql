var search_data = {"index":{"searchIndex":["github","graphql","new()","payload()","query()","query()","token()"],"longSearchIndex":["github","github::graphql","github::graphql::new()","github::graphql#payload()","github::query()","github::graphql#query()","github::graphql#token()"],"info":[["Github","","Github.html","","<p>This module contains tools for interacting with the Github API\n"],["Github::GraphQL","","Github/GraphQL.html","","<p>This class is used to make queries to the Github GraphQL API\n"],["new","Github::GraphQL","Github/GraphQL.html#method-c-new","(token, query, vars = nil)","<p>Expects a valid Github OAuth token &amp; the GraphQL query string, and\noptionally a hash array of any …\n"],["payload","Github::GraphQL","Github/GraphQL.html#method-i-payload","(query, vars = nil)","<p>Set the query string and optionally the variables to be passed with the\nquery.\n<p>Will raise an ArgumentError …\n"],["query","Github","Github.html#method-c-query","(token, query, vars = nil)","<p>Execute a query to the GraphQL API. Expects a valid Github OAuth token and\nthe query string, and optionally …\n"],["query","Github::GraphQL","Github/GraphQL.html#method-i-query","()","<p>Execute the query.\n<p>Returns a ruby hash array of the response from Github.\n"],["token","Github::GraphQL","Github/GraphQL.html#method-i-token","(token)","<p>Set the OAuth token.\n<p>Will raise an ArgumentError if token is nil\n"]]}}